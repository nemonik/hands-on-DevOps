---
# tasks file for golang

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

- name: is go installed?
  stat: path=/usr/local/go
  register: go
  tags:
    - golang

- name: download and install golang binary release if not Alpine 3.10, if needed
  block:
  - name: create /vagrant/cache/{{ group_names[0] }} if it doesn't exist
    shell: |
      if [[ "windows" == "{{ host_os }}" ]]; then
        sudo su
      fi
      mkdir -p /vagrant/cache/{{ group_names[0] }}
    args:
      executable: /bin/bash

  - name: is https://dl.google.com/go/go{{ golang_version }}.linux-amd64.tar.gz cached?
    stat:
      path: /vagrant/cache/{{ group_names[0] }}/go{{ golang_version }}.linux-amd64.tar.gz
    register: go_distributable

  - name: cache https://dl.google.com/go/go{{ golang_version }}.linux-amd64.tar.gz
    shell: |
      if [[ "windows" == "{{ host_os }}" ]]; then
         sudo su
      fi
      rm -f /vagrant/cache/{{ group_names[0] }}/go{{ golang_version }}.linux-amd64.tar.gz
      wget -q https://dl.google.com/go/go{{ golang_version }}.linux-amd64.tar.gz --directory-prefix /vagrant/cache/{{ group_names[0] }}
    args:
      executable: /bin/bash
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    when: go_distributable.stat.exists == False

  - name: install go
    become: yes
    unarchive:
      src: /vagrant/cache/{{ group_names[0] }}/go{{ golang_version }}.linux-amd64.tar.gz
      dest: /usr/local
  when: go.stat.exists == False and not ( ansible_distribution == 'Alpine' and '3.10' in ansible_distribution_version )
  tags:
    - golang

- name: download and install golang from source release for Alpine 3.10, if needed 
  block:
  - name: create /vagrant/cache/{{ group_names[0] }} if it doesn't exist, if Alpine 3.10
    shell: |
      if [[ "windows" == "{{ host_os }}" ]]; then
        sudo su
      fi
      mkdir -p /vagrant/cache/{{ group_names[0] }}
    args:
      executable: /bin/bash

  - name: is https://github.com/golang/go/archive/go{{ golang_version }}.tar.gz cached?
    stat:
      path: /vagrant/cache/{{ group_names[0] }}/go{{ golang_version }}.tar.gz
    register: go_distributable

  - name: cache https://github.com/golang/go/archive/go{{ golang_version }}.tar.gz, if Alpine 3.10
    shell: |
      if [[ "windows" == "{{ host_os }}" ]]; then
         sudo su
      fi
      rm -f /vagrant/cache/{{ group_names[0] }}/go{{ golang_version }}.tar.gz
      wget -q https://github.com/golang/go/archive/go{{ golang_version }}.tar.gz --directory-prefix /vagrant/cache/{{ group_names[0] }}
    args:
      executable: /bin/bash
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    when: go_distributable.stat.exists == False

  - name: ensure build related packages are installed, if Alpine 3.10
    become: yes
    apk:
      name: ['bash', 'gcc', 'musl-dev', 'openssl', 'go']
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded

  - name: building go from source, this will take some time..., if Alpine 3.10 
    become: yes
    shell: |
      tar -C /usr/local -xvf /vagrant/cache/{{ group_names[0] }}/go{{ golang_version }}.tar.gz
      mv /usr/local/go-go{{ golang_version }} /usr/local/go
      cd /usr/local/go/src/ 
      ./make.bash 
      apk del go
    args:
      executable: /bin/bash
  when: go.stat.exists == False and ( ansible_distribution == 'Alpine' and '3.10' in ansible_distribution_version )
  tags:
    - golang

- name: ensure /etc/profile PATH includes /usr/local/go/bin
  block:
  - name: ensure "export PATH=/usr/local/go/bin:$PATH" is absent from /etc/profile
    become: yes
    lineinfile:
      dest: /etc/profile
      regexp: "^export PATH=/usr/local/go/bin:$PATH"
      state: absent

  - name: ensure "export PATH=/usr/local/go/bin:$PATH" is in /etc/profile
    become: yes
    lineinfile:
      dest: /etc/profile
      line: export PATH=/usr/local/go/bin:$PATH
      insertafter: EOF
  tags:
    - golang

- name: checking golang project folders
  file:
    path: /home/{{ ansible_user_id }}/go/{{ item }}
    state: directory
    mode: 0775
  with_items:
    - bin
    - pkg
    - src
  tags:
    - golang

- name: ensure /etc/profile defines GOBIN and GOPATH environment variables
  become: yes
  block:
    - lineinfile:
        dest: /etc/profile
        regexp: "{{ item.regexp }}"
        state: absent
      with_items:
        - { regexp: "^export GOBIN" }
        - { regexp: "^export GOPATH" }
        - { regexp: '^export PATH="$GOBIN:$PATH"' }

    - lineinfile:
        dest: /etc/profile
        line: "{{ item.line }}"
        insertafter: EOF      
      with_items:
        - { line: 'export GOBIN="$HOME/go/bin"' }
        - { line: 'export GOPATH="$HOME/go"' }
        - { line: 'export PATH="$GOBIN:$PATH"' }
  tags:
    - golang
