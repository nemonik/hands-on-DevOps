---
# tasks file for drone

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>


- set_fact:
    images:
      - { repository: 'sameersbn/postgresql', tag: '10-2' }
      - { repository: 'alpine', tag: '3.10.2' }
      - { repository: 'drone/agent', tag: '{{ drone_agent_version }}' }
      - { repository: 'drone/drone', tag: '{{ drone_version }}' }
      - { repository: 'drone/git', tag: 'latest' }
      - { repository: 'plugins/docker', tag: 'latest' }
      - { repository: 'appleboy/drone-ssh', tag: 'latest' }

- name: ensure /home/{{ ansible_user_id }}/drone exists
  file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: "/home/{{ ansible_user_id }}/drone/drone-server" }
    - { path: "/home/{{ ansible_user_id }}/drone/drone-agent" }
  tags:
    - drone 

- name: wait for GitLab to come up
  uri:
    url: http://{{ gitlab_host }}:{{ gitlab_port }}/favicon.ico
    status_code: [200]
  register: result
  until: result.status == 200
  retries: "{{ default_retries }}"
  delay: "{{ default_delay }}"

- name: retrieve personal_access_token to access GitLAb 
  block:
  - name: get personal_access_token to GitLab
    shell: |
      body_header=$(curl -s -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      curl -s -b cookies.txt -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" --data "user[login]=root&user[password]={{ vault_gitlab_root_password }}" --data-urlencode "authenticity_token=${csrf_token}" &>/dev/null
      body_header=$(curl -s -H 'user-agent: curl' -b cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      body_header=$(curl -s -L -b cookies.txt "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" --data-urlencode "authenticity_token=${csrf_token}" --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')
      rm cookies.txt
      echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p
    args:
      chdir: /home/{{ ansible_user_id }}
      executable: /bin/bash
    register: gitlab_personal_access_token_result

  - name: set the gitlab_personal_access_token
    set_fact: gitlab_personal_access_token={{ gitlab_personal_access_token_result.stdout }}

  when: gitlab_personal_access_token is undefined
  tags:
    - drone

- name: test for gitlab_personal_access_token
  debug:
    msg: "{{ gitlab_personal_access_token }}"
  tags:
    - drone

- name: integrate with GitLab
  block: 
  - name: list GitLab applications
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/applications
      method: GET
      body_format: form-urlencoded
      return_content: yes
      status_code: 200
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
    register: applications

  - name: delete existing Drone CI application registration
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/applications/{{ item.id }}
      method: DELETE
      status_code: 204
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
    with_items: "{{ applications.json }}"
    when: item.application_name == "Drone CI"
 
  - name: configure a GitLab integration 
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/applications
      method: POST
      body_format: form-urlencoded
      body:
      - [ name, "Drone CI" ]
      - [ redirect_uri, "http://{{ drone_host }}:{{ drone_port }}/login" ]
      - [ scopes, "" ]
      return_content: yes
      status_code: 201
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
    register: drone

  - set_fact:
      drone_gitlab_client_id: "{{ drone.json.application_id }}"
      drone_gitlab_client_secret: "{{ drone.json.secret }}"
  tags:
    - drone

- name: determine k3s_flannel_iface of master
  block:
  - name: set interface, if Alpine 3.10
    set_fact:
      k3s_flannel_iface: 'eth1'
    when: ansible_distribution == 'Alpine' and '3.10' in ansible_distribution_version

  - name: set interface, if CentOS 7
    set_fact:
      k3s_flannel_iface: 'eth1'
    when:  ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'

  - name: set interface, if Ubuntu-bionic
    set_fact:
      k3s_flannel_iface: 'enp0s8'
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'bionic'

  - name: fail, if not Alpine or Ubuntu-bionic or CentOS 7
    fail:
      msg: "{{ ansible_distribution }} - {{ ansible_distribution_release }} is not supported."
    when: k3s_flannel_iface is not defined
  tags:
    - k3s-server

- name: get ip for {{ k3s_flannel_iface }} to use in README.MD.j2
  shell: ip a show {{ k3s_flannel_iface }} | grep "inet " | awk '{print $2}' | cut -d / -f1
  register: ipaddr
  tags:
    - drone

- name: template files into /home/{{ ansible_user_id }}/drone
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    force: yes
  with_items:
    - { src: "templates/README.MD.j2", dest: "/home/{{ ansible_user_id }}/drone/README.MD" }
    - { src: "templates/docker-compose.yml.j2", dest: "/home/{{ ansible_user_id }}/drone/docker-compose.yml" }
    - { src: "templates/drone-server/Dockerfile.j2", dest: "/home/{{ ansible_user_id }}/drone/drone-server/Dockerfile" }
    - { src: "templates/drone-server/dockerfile_build.sh.j2", dest: "/home/{{ ansible_user_id }}/drone/drone-server/dockerfile_build.sh" }
    - { src: "templates/drone-agent/Dockerfile.j2", dest: "/home/{{ ansible_user_id }}/drone/drone-agent/Dockerfile" }
    - { src: "templates/drone-agent/dockerfile_build.sh.j2", dest: "/home/{{ ansible_user_id }}/drone/drone-agent/dockerfile_build.sh" }
  tags:
    - drone 

- name: make dockerfile_build.sh scripts executable
  file: 
    path: "{{ item.path }}"
    mode: "u=rwx,g=r,o=r"  
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  with_items:
    - { path: "/home/{{ ansible_user_id }}/drone/drone-server/dockerfile_build.sh" }
    - { path: "/home/{{ ansible_user_id }}/drone/drone-agent/dockerfile_build.sh" }
  tags:
    - drone 

- name: emplace images into private container registry
  block:
  - name: load {{ images }} from cache
    include_tasks: retrieve_container_image.yml
    loop: "{{ images }}"

  - name: pull {{ images }} container images
    docker_image:
      name: "{{ item.repository }}:{{ item.tag }}"
      source: pull
      timeout: "{{ docker_timeout }}"
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"

  - name: tag and push {{ images }} into private registry
    shell: |
      docker tag {{ item.repository }}:{{ item.tag }} {{ registry_host }}:{{ registry_port }}/{{ item.repository }}:{{ item.tag }}
      docker push {{ registry_host }}:{{ registry_port }}/{{ item.repository }}:{{ item.tag }}
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"

  - name: build nemonik/agent:{{ drone_version }} and nemonik/drone:{{ drone_version }} docker images
    docker_image:
      name: "{{ item.name }}"
      tag: "{{ item.version }}"
      repository: "{{ registry_host }}:{{ registry_port }}/{{ item.name }}"
      source: build
      build:
        pull: yes
        path: "{{ item.path }}"
        args:
          http_proxy: "{{ http_proxy|default('') }}"
          HTTP_PROXY: "{{ http_proxy|default('') }}"
          https_proxy: "{{ https_proxy|default('') }}"
          HTTPS_PROXY: "{{ https_proxy|default('') }}"
          NO_PROXY: "{{ no_proxy|default('') }}"
          no_proxy: "{{ no_proxy|default('') }}"
      push: yes
    with_items:
      - { path: "/home/{{ ansible_user_id }}/drone/drone-agent", name: 'nemonik/agent', version: "{{ drone_agent_version }}" }
      - { path: "/home/{{ ansible_user_id }}/drone/drone-server", name: 'nemonik/drone', version: "{{ drone_version }}" }
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
  tags:
    - drone

- name: spin up Drone CI via docker-compose
  docker_service:
    build: no
    debug: yes
    project_src: /home/{{ ansible_user_id }}/drone
  tags:
    - drone

- name: save {{ images }} to cache
  include_tasks: cache_container_image.yml
  loop: "{{ images }}"
  tags:
    - drone

