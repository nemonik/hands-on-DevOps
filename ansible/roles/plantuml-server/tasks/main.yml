---
# tasks file for plantuml-server

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

- set_fact:
    images:
      - { repository: "plantuml/plantuml-server", tag: "{{plantuml_server_version}}" }

- name: create /home/{{ ansible_user_id }}/plantuml-server
  file:
    path: /home/{{ ansible_user_id }}/plantuml-server
    state: directory
  tags:
    - plantuml-server

- name: template files into /home/{{ ansible_user_id }}/plantuml-server
  template:
    src: templates/{{ item.src }}
    dest: /home/{{ ansible_user_id }}/plantuml-server/{{ item.dest }}
    force: yes
  with_items:
    - { src: "Dockerfile.j2", dest: "Dockerfile" }
    - { src: "dockerfile_build.sh.j2", dest: "dockerfile_build.sh" }
  tags:
    - plantuml-server

- name: make /home/{{ ansible_user_id }}/plantuml-server/dockerfile_build.sh executable
  file: 
    path: /home/{{ ansible_user_id }}/plantuml-server/dockerfile_build.sh
    mode: "u=rwx,g=r,o=r"  
  tags:
    - plantuml-server

- name: emplace images into private container registry
  block:
  - name: load {{ images }} from cache
    include_tasks: retrieve_container_image.yml
    loop: "{{ images }}"

  - name: pull {{ images }} container images
    docker_image:
      name: "{{ item.repository }}:{{ item.tag }}"
      source: pull
      timeout: "{{ docker_timeout }}"
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"

  - name: tag and push {{ images }} into private registry
    shell: |
      docker tag {{ item.repository }}:{{ item.tag }} {{ registry_host }}:{{ registry_port }}/{{ item.repository }}:{{ item.tag }}
      docker push {{ registry_host }}:{{ registry_port }}/{{ item.repository }}:{{ item.tag }}
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"
  
  - name: build nemonik/plantuml-server:{{ plantuml_server_version }} and push into private container registry
    docker_image:
      name: nemonik/plantuml-server
      repository: "{{ registry_host }}:{{ registry_port }}/nemonik/plantuml-server"
      tag: "{{ plantuml_server_version }}"
      source: build
      build:
        pull: yes
        path: /home/{{ ansible_user_id }}/plantuml-server
        args:
          http_proxy: "{{ http_proxy|default('') }}"
          HTTP_PROXY: "{{ http_proxy|default('') }}"
          https_proxy: "{{ https_proxy|default('') }}"
          HTTPS_PROXY: "{{ https_proxy|default('') }}"
          NO_PROXY: "{{ no_proxy|default('') }}"
          no_proxy: "{{ no_proxy|default('') }}" 
      push: yes
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
  tags:
    - plantuml-server

- name: spin up Plantuml Server via kubernetes
  block:
  - name: template kubernetes resource files into /home/{{ ansible_user_id }}/plantuml-server
    template:
      src: templates/plantuml-server.yml.j2
      dest: /home/{{ ansible_user_id }}/plantuml-server/plantuml-server.yml
      force: yes

  - name: is plantuml-server running?
    shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml -n plantuml-server get pod | grep Running | wc -l
    register: running

  - name: spin up via kubectl
    shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml apply -f plantuml-server.yml
    args:
      chdir: /home/{{ ansible_user_id }}/plantuml-server
    when: running.stdout == "0"
  tags:
    - plantuml-server

- name: save {{ images }} to cache
  include_tasks: cache_container_image.yml
  loop: "{{ images }}"
  tags:
     - plantuml-server
