---
# tasks file for gitlab

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

- set_fact:
    images:
      - { repository: "sameersbn/gitlab", tag: "{{ gitlab_version }}" }
      - { repository: "sameersbn/redis", tag: "4.0.9-1" }
      - { repository: "sameersbn/postgresql", tag: "10-2" }

- name: ensure /home/{{ ansible_user_id }}/gitlab exists
  file:
    path: /home/{{ ansible_user_id }}/gitlab
    state: directory
  tags:
    - gitlab

- name: template files into /home/{{ ansible_user_id }}/gitlab
  template:
    src: templates/{{ item }}.j2
    dest: /home/{{ ansible_user_id }}/gitlab/{{ item }}
    force: yes
  with_items:
    - "README.MD"
    - "Dockerfile"
    - "dockerfile_build.sh"
  tags:
    - gitlab

- name: make //home/{{ ansible_user_id }}/gitlab/dockerfile_build.sh executable
  file:
    path: "/home/{{ ansible_user_id }}/gitlab/dockerfile_build.sh"
    mode: "u=rwx,g=r,o=r"
  tags:
    - gitlab

- name: emplace images into private container registry
  block:
  - name: load {{ images }} from cache
    include_tasks: retrieve_container_image.yml
    loop: "{{ images }}"

  - name: pull {{ images }} container images
    docker_image:
      name: "{{ item.repository }}:{{ item.tag }}"
      source: pull
      timeout: "{{ docker_timeout }}"
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"

  - name: tag and push {{ images }} into private registry
    shell: |
      docker tag {{ item.repository }}:{{ item.tag }} {{ registry_host }}:{{ registry_port }}/{{ item.repository }}:{{ item.tag }}
      docker push {{ registry_host }}:{{ registry_port }}/{{ item.repository }}:{{ item.tag }}
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"
    register: result
    until: result is succeeded
    loop: "{{ images }}"

  - name: build nemonik/gitlab:{{ gitlab_version }} and push into private container registry
    docker_image:
      name: "nemonik/gitlab"
      tag: "{{ gitlab_version }}"
      repository: "{{ registry_host }}:{{ registry_port }}/nemonik/gitlab"
      source: build    
      build:
        pull: yes
        path: /home/{{ ansible_user_id }}/gitlab
        args:
          http_proxy: "{{ http_proxy|default('') }}"
          HTTP_PROXY: "{{ http_proxy|default('') }}"
          https_proxy: "{{ https_proxy|default('') }}"
          HTTPS_PROXY: "{{ https_proxy|default('') }}"
          NO_PROXY: "{{ no_proxy|default('') }}"
          no_proxy: "{{ no_proxy|default('') }}" 
      push: yes
    retries: "{{ docker_retries }}"
    delay: "{{ docker_delay }}"
    register: result
    until: result is succeeded
  tags:
    - gitlab

- name: spin up GitLab via Kubernetes
  block:
  - name: template Kubernetes resource files into /home/{{ ansible_user_id }}/gitlab
    template:
      src: templates/gitlab.yml.j2  
      dest: /home/{{ ansible_user_id }}/gitlab/gitlab.yml
      force: yes

  - name: is gitlab running?
    shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml -n gitlab get pod | grep Running | wc -l
    register: running

  - name: spin up via kubectl
    shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml apply -f gitlab.yml
    args:
      chdir: /home/{{ ansible_user_id }}/gitlab
    when: running.stdout == "0"
  tags:
    - gitlab

# See: https://docs.gitlab.com/ee/api/settings.html
- name: ensure allow local requests from hooks and services is enabled, auto devops is disabled, plantuml integration is configured, disable registration and email confirmation...
  block:
  - name: wait for GitLab to come up
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/favicon.ico
      status_code: [200]
    register: result
    until: result.status == 200
    retries: "{{ default_retries }}"
    delay: "{{ default_delay }}"

  - name: get personal_access_token to GitLab
    shell: |
      body_header=$(curl -s -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      curl -s -b cookies.txt -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" --data "user[login]=root&user[password]={{ vault_gitlab_root_password }}" --data-urlencode "authenticity_token=${csrf_token}" &>/dev/null
      body_header=$(curl -s -H 'user-agent: curl' -b cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      body_header=$(curl -s -L -b cookies.txt "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" --data-urlencode "authenticity_token=${csrf_token}" --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')
      rm cookies.txt
      echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p
    args:
      chdir: /home/{{ ansible_user_id }}
      executable: /bin/bash
    register: gitlab_personal_access_token_result

  - name: set the gitlab_personal_access_token
    set_fact: gitlab_personal_access_token={{ gitlab_personal_access_token_result.stdout }}

  - name: set GitLab applicaton settings
    uri:
      url: http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/application/settings?allow_local_requests_from_hooks_and_services=true&auto_devops_enabled=false&plantuml_enabled=true&plantuml_url=http://{{ plantuml_host }}:{{ plantuml_port }}&signup_enabled=false&send_user_confirmation_email=false
      method: PUT
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
  tags:
    - gitlab

- name: save {{ images }} to cache
  include_tasks: cache_container_image.yml
  loop: "{{ images }}"
  tags:
    - gitlab
